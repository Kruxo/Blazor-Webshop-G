@page "/"
@inject UserManager<ApplicationUser> UserManager
@inject UserService UserService
@inject AuthenticationStateProvider StateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@attribute [Authorize]
@rendermode InteractiveServer

<style><!-- fick av någon anledning inte stylesheet i seperat fil att funka ihop med htmlen -->
    .product-container {
        display: flex;
        flex-wrap: wrap;
    }

    .product-item {
        margin-right: 20px;
        margin-bottom: 20px;
        text-align: center;
    }

    .product-image {
        width: 200px;
        height: 300px;
        object-fit: cover;
        cursor: pointer;
    }
</style>

<div class="product-container">
    @foreach (var product in products)
    {
        <div class="product-item">
            <a href="/products/@product.Id">
                <img src="@product.ImageUrl" alt="@($"Product{product.Id}")" class="product-image" />
            </a>
            <div class="product-details">
                <h4>@product.Name</h4>
                <p>Price: @product.Price kr</p>
                <button @onclick="() => AddToCart(product)">Add to Cart</button>
            </div>

        </div>
    }

</div>

<button @onclick="GoToConfirmation">Go To Cart</button>


@code {
    ApplicationUser? user;
    AuthenticationState? authenticationState;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await StateProvider.GetAuthenticationStateAsync();
        var stateUser = await UserManager.GetUserAsync(authenticationState.User);
        user = await UserService.GetUserProductsInfo(stateUser);
    }

    public List<Product> products = new List<Product>
    {
        new Product { Id = 1, Name = "Sour Patch Kids", ImageUrl = "/images/product1.jpg", Description = "Description 1", Quantity = 10, Price = 20 },
        new Product { Id = 2, Name = "Wine Gums", ImageUrl = "/images/product2.jpg", Description = "Description 2", Quantity = 15, Price = 25 },
        new Product { Id = 3, Name = "lly Tots", ImageUrl = "/images/product3.jpg", Description = "Description 3", Quantity = 5, Price = 15 },
        new Product { Id = 4, Name = "Jelly Babies", ImageUrl = "/images/product4.jpg", Description = "Description 4", Quantity = 20, Price = 15 },
        new Product { Id = 5, Name = "Fruit Pastilles", ImageUrl = "/images/product5.jpg", Description = "Description 5", Quantity = 8, Price = 18 },
    };

    public async Task AddToCart(Product product)
    {
        if (user is not null)
        {
            user.Products.Add(product);
            await localStorage.SetItemAsync(user.Id, user.Products.ToList());
        }
    }


    public async Task GoToConfirmation()
        {
        var stateUser = await UserManager.GetUserAsync(authenticationState.User);
        user = await UserService.GetUserProductsInfo(stateUser);

        await localStorage.SetItemAsync(user.Id, user.Products.ToList());
        NavigationManager.NavigateTo("/orderconfirmcart");
    }

    /*public class ClientProduct
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string ImageUrl { get; set; }
        public string Description { get; set; }
        public int Quantity { get; set; }
        public double Price { get; set; }
    }*/
}