@page "/"
@inject UserManager<ApplicationUser> UserManager
@inject UserService UserService
@inject AuthenticationStateProvider StateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject HttpClient HttpClient

@attribute [Authorize]
@rendermode InteractiveServer

<style><!-- fick av någon anledning inte stylesheet i seperat fil att funka ihop med htmlen -->
    .product-container {
        display: flex;
        flex-wrap: wrap;
    }

    .product-item {
        margin-right: 20px;
        margin-bottom: 20px;
        text-align: center;
    }

    .product-image {
        width: 200px;
        height: 300px;
        object-fit: cover;
        cursor: pointer;
    }
</style>

<div class="product-container">
    @foreach (var product in products)
    {
        <div class="product-item">
            <img src="@product.ImageUrl" alt="@($"Product{product.Id}")" class="product-image" @onclick="() => NavigateToProduct(product.Id)" />
            <div class="product-details">
                <h4>@product.Name</h4>
                <p>Price: @ConvertCurrency(product.Price) @toCurrency</p>
                <button @onclick="() => AddToCart(product)">Add to Cart (Quantity: @product.Quantity)</button>
            </div>
        </div>
    }
</div>

<button @onclick="GoToConfirmation">Go To Cart</button>
@* <button @onclick="ChangeCurrency">Change Currency</button> *@

@code {
    ApplicationUser? user;
    AuthenticationState? authenticationState;
    string userId = "TestUserId";
    public float exchangeRate = 1;
    string fromCurrency = "USD";
    string toCurrency = "EUR";

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await StateProvider.GetAuthenticationStateAsync();
        var stateUser = await UserManager.GetUserAsync(authenticationState.User);
        user = await UserService.GetUserProductsInfo(stateUser);
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         HttpClient.DefaultRequestHeaders.Add("X-Api-Key", "zBHK/0niL00SbbXY68qt4w==Wu29rq1TsPyjw6Cr");
    //         var response = await HttpClient.GetFromJsonAsync<ResponseType>($"https://api.api-ninjas.com/v1/exchangerate?pair={fromCurrency}_{toCurrency}");
    //         exchangeRate = response.exchange_rate;

    //         StateHasChanged();
    //     }
    // }

    public List<Product> products = new List<Product>
    {
        new Product { Id = 1, Name = "Sour Patch Kids", ImageUrl = "/images/product1.jpg", Description = "Not real kids", Quantity = 10, Price = 20 },
        new Product { Id = 2, Name = "Wine Gums", ImageUrl = "/images/product2.jpg", Description = "Neither red or white wine", Quantity = 15, Price = 25 },
        new Product { Id = 3, Name = "Jelly Tots", ImageUrl = "/images/product3.jpg", Description = "Skittles from wish", Quantity = 5, Price = 15 },
        new Product { Id = 4, Name = "Jelly Babies", ImageUrl = "/images/product4.jpg", Description = "Again not real babies", Quantity = 20, Price = 15 },
        new Product { Id = 5, Name = "Fruit Pastilles", ImageUrl = "/images/product5.jpg", Description = "Old people candy", Quantity = 8, Price = 18 },
    };

    public async Task NavigateToProduct(int productId)
    {
        NavigationManager.NavigateTo($"/product/{productId}");
    }

    public async Task AddToCart(Product product)
    {
        if (user is not null && product.Quantity > 0)
        {
            user.Products.Add(product);
            product.Quantity--;

            await sessionStorage.SetItemAsync(userId, user.Products.ToList());
        }
    }

    public async Task GoToConfirmation()
    {
        var stateUser = await UserManager.GetUserAsync(authenticationState.User);
        user = await UserService.GetUserProductsInfo(stateUser);

        await sessionStorage.SetItemAsync(userId, user.Products.ToList());
        NavigationManager.NavigateTo("/ordercart");

    }

    public string ConvertCurrency(float price)
    {
        float convertedPrice = price * exchangeRate;
        return convertedPrice.ToString("0.00");
    }

    // public async Task ChangeCurrency()
    // {
    //     toCurrency = (toCurrency == "EUR") ? "USD" : "EUR";
    //     await UpdateExchangeRate();

    //     StateHasChanged();
    // }

    // private async Task UpdateExchangeRate()
    // {
    //     var response = await HttpClient.GetFromJsonAsync<ResponseType>($"https://api.api-ninjas.com/v1/exchangerate?pair={fromCurrency}_{toCurrency}");
    //     exchangeRate = response.exchange_rate;
    // }

    class ResponseType
    {
        public string currency_pair { get; set; }
        public float exchange_rate { get; set; }
    }
}