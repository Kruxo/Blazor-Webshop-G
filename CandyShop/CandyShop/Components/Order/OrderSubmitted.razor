@page "/ordersubmitted"
@inject AuthenticationStateProvider StateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager


@attribute [Authorize]
@rendermode InteractiveServer

<h3>Order Confirmed</h3>

<h4>Order Details</h4>

@if (ConfirmationItems != null && ConfirmationItems.Count > 0)
{
    <ul>
        @foreach (var product in ConfirmationItems)
        {
            <li>@product.Name - @product.Price kr</li>
        }
    </ul>
}
else
{
    <p>No order details available.</p>
}

<h4>Address</h4>
<p>Name: @Address.Name</p>
<p>Street: @Address.Street</p>
<p>City: @Address.City</p>
<p>Postal Code: @Address.PostalCode</p>
<p>Country: @Address.Country</p>

@code {

    UserAddress Address = new UserAddress();
    AuthenticationState authenticationState;
    List<Product> ConfirmationItems = new List<Product>();
    string userId = "TestUserId";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Hämtar URL sträng och parsar
        var queryString = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
        var queryParameters = System.Web.HttpUtility.ParseQueryString(queryString);

        Address = new UserAddress
            {
                Name = queryParameters["name"],
                Street = queryParameters["street"],
                City = queryParameters["city"],
                PostalCode = queryParameters["postalCode"],
                Country = queryParameters["country"]
            };

        @if (firstRender)
        {
            ConfirmationItems = await sessionStorage.GetItemAsync<List<Product>>(userId);
            StateHasChanged();

            // Rensar produkterna i vår sessionStorage
            await sessionStorage.RemoveItemAsync(userId);   
        }
    }   

}
