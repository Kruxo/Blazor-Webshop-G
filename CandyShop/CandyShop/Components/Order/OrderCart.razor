@page "/ordercart"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider StateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@attribute [Authorize]
@rendermode InteractiveServer

<style>

    .product-container {
        display: flex;
        flex-wrap: wrap;
    }

    .product-item {
        margin-right: 20px;
        margin-bottom: 20px;
        text-align: center;
    }

    .product-image {
        width: 100px;
        height: 150px;
        object-fit: cover;
        cursor: pointer;
    }
</style>

<h3>Order Cart</h3>

<div class="product-container">
    @if (ConfirmationItems != null)
    {
        @foreach (var product in ConfirmationItems)
        {
            <div class="product-item">
                <img src="@product.ImageUrl" alt="@($"Product{product.Id}")" class="product-image" />
                <p>@product.Name</p>
                <p>@product.Price Kr</p>
            </div>
        }
    }
    else
    {
        <p>No items in the cart.</p>
    }
</div>

<h4>Enter Your Address</h4>
<form>
    <div>
        <label for="name">Name:</label>
        <input type="text" id="name" @bind="Address.Name" />
    </div>
    <div>
        <label for="street">Street:</label>
        <input type="text" id="street" @bind="Address.Street" />
    </div>
    <div>
        <label for="city">City:</label>
        <input type="text" id="city" @bind="Address.City" />
    </div>
    <div>
        <label for="postalCode">Postal Code:</label>
        <input type="text" id="postalCode" @bind="Address.PostalCode" />
    </div>
    <div>
        <label for="country">Country:</label>
        <input type="text" id="country" @bind="Address.Country" />
    </div>
    <button type="button" @onclick="SubmitOrder">Submit Order</button>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p style="color: red;">@ErrorMessage</p>
    }

</form>

@code {
    AuthenticationState authenticationState;
    List<Product> ConfirmationItems = new List<Product>();
    public UserAddress Address = new UserAddress();
    string ErrorMessage = string.Empty;
    string userId = "TestUserId";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ConfirmationItems = await sessionStorage.GetItemAsync<List<Product>>(userId);
            StateHasChanged();
        }
    }

    private async Task SubmitOrder()
    {
        if (string.IsNullOrEmpty(Address.Name) ||
            string.IsNullOrEmpty(Address.Street) ||
            string.IsNullOrEmpty(Address.City) ||
            string.IsNullOrEmpty(Address.PostalCode) ||
            string.IsNullOrEmpty(Address.Country))
        {
            ErrorMessage = "Please fill in all address fields.";
            return;
        }
        else if (ConfirmationItems == null || ConfirmationItems.Count == 0)
        {
            ErrorMessage = "Your cart is empty. Please add products to your cart before submitting the order.";
            return;
        }
        else
        {
            var orderDetails = new UserOrder
                {
                    Products = ConfirmationItems,
                    Address = new UserAddress
                    {
                        Name = Address.Name,
                        Street = Address.Street,
                        City = Address.City,
                        PostalCode = Address.PostalCode,
                        Country = Address.Country
                    }
                };

            //Serialiserar adressen
            var addressParameter = $"&name={Uri.EscapeDataString(orderDetails.Address.Name)}" +
                                    $"&street={Uri.EscapeDataString(orderDetails.Address.Street)}" +
                                    $"&city={Uri.EscapeDataString(orderDetails.Address.City)}" +
                                    $"&postalCode={Uri.EscapeDataString(orderDetails.Address.PostalCode)}" +
                                    $"&country={Uri.EscapeDataString(orderDetails.Address.Country)}";


            var navigateUrl = $"/ordersubmitted?{addressParameter}";
            NavigationManager.NavigateTo(navigateUrl);



        }

    }

}