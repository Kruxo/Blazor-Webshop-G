@page "/orderconfirmcart"

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider StateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage


@attribute [Authorize]
@rendermode InteractiveWebAssembly

<style>

    .product-container {
        display: flex;
        flex-wrap: wrap;
    }

    .product-item {
        margin-right: 20px;
        margin-bottom: 20px;
        text-align: center;
    }
    .product-image {
        width: 100px;
        height: 150px;
        object-fit: cover;
        cursor: pointer;
    }
</style>

<h3>OrderConfirmation</h3>

<div class="product-container">
    @foreach (var product in ConfirmationItems)
    {
        <div class="product-item">
            <img src="@product.ImageUrl" alt="@($"Product{product.Id}")" class="product-image" />
            <p>@product.Name</p>
            <p>@product.Price Kr</p>
        </div>
    }
</div>

<h4>Enter Your Address</h4>
<form>
    <div>
        <label for="street">Street:</label>
        <input type="text" id="street" @bind="Address.Street" />
    </div>
    <div>
        <label for="city">City:</label>
        <input type="text" id="city" @bind="Address.City" />
    </div>
    <div>
        <label for="postalCode">Postal Code:</label>
        <input type="text" id="postalCode" @bind="Address.PostalCode" />
    </div>
    <div>
        <label for="country">Country:</label>
        <input type="text" id="country" @bind="Address.Country" />
    </div>
    <button type="button" @onclick="SubmitOrder">Submit Order</button>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p style="color: red;">@ErrorMessage</p>
    }

</form>

@code {
    AuthenticationState authenticationState;
    List<ClientProduct> ConfirmationItems = new List<ClientProduct>();
    public UserAddress Address = new UserAddress();
    string ErrorMessage = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authenticationState = await StateProvider.GetAuthenticationStateAsync();
            var userId = authenticationState.User.Claims
                .Where(c => c.Type == ClaimTypes.NameIdentifier)
                .First()
                .Value;

            ConfirmationItems = await localStorage.GetItemAsync<List<ClientProduct>>(userId);
            StateHasChanged();
        }
    }

    private async Task SubmitOrder()
    {
        if (string.IsNullOrEmpty(Address.Street) ||
            string.IsNullOrEmpty(Address.City) ||
            string.IsNullOrEmpty(Address.PostalCode) ||
            string.IsNullOrEmpty(Address.Country))
        {
            ErrorMessage = "Please fill in all address fields.";
            return;
        }
        else
        {
            var orderDetails = new OrderDetailsModel
                {
                    Products = ConfirmationItems,
                    Address = new UserAddress
                    {
                        Street = Address.Street,
                        City = Address.City,
                        PostalCode = Address.PostalCode,
                        Country = Address.Country
                    }
                };

            //Serialiserar adressen
            var addressParameter = $"street={Uri.EscapeDataString(orderDetails.Address.Street)}" +
                                    $"&city={Uri.EscapeDataString(orderDetails.Address.City)}" +
                                    $"&postalCode={Uri.EscapeDataString(orderDetails.Address.PostalCode)}" +
                                    $"&country={Uri.EscapeDataString(orderDetails.Address.Country)}";

            var navigateUrl = $"/ordersubmitted?{addressParameter}";

            NavigationManager.NavigateTo(navigateUrl);
        }

    }


}